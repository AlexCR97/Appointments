version: "3.8"

networks:
  appointments-network:
    name: appointments-network

volumes:
  mongo:
    driver: local
  redis:
    driver: local
  zookeeper:
    driver: local
  kafka:
    driver: local

services:

  mongo:
    image: mongo:6.0.5
    ports:
      - 27017:27017
    networks:
      - appointments-network
    volumes:
      - mongo:/data/db
  
  redis:
    image: redis:6.2.0-alpine
    ports:
      - 6379:6379
    networks:
      - appointments-network
    volumes: 
      - redis:/data

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.6.2-debian-10-r156
    ports:
      - 2181:2181
    networks:
      - appointments-network
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper:/bitnami

  kafka:
    image: docker.io/bitnami/kafka:2.7.0-debian-10-r95
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9093:9093
    networks:
      - appointments-network
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka:/bitnami

  kafka-ui:
   image: provectuslabs/kafka-ui:v0.4.0
   ports:
     - 8080:8080
   networks:
      - appointments-network
   depends_on:
     - kafka
   environment:
     KAFKA_CLUSTERS_0_NAME: 'local'
     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:9092'
     KAFKA_CLUSTERS_0_ZOOKEEPER: 'zookeeper:2181'

  api:
    build:
      dockerfile: ./Appointments.Api/Dockerfile
    ports:
      - 5013:80
    networks:
      - appointments-network
    depends_on:
      - mongo
      - redis
      - kafka
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
